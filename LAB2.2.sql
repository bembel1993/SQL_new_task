----TABLE 1-------
CREATE TABLE HUMAN_RESURCES_DEPARTMEN
(
  IDEMPLOYEE INT NOT NULL,
  NAMEFL VARCHAR(30),
  FAMILYSTATUS VARCHAR(30),
  BIRTHDAY DATE,
  EDUCATION VARCHAR(30),
  LASTPLACEWORK VARCHAR(30),
  EXPERIENCE INT,
  DEPARTMENT VARCHAR(30),
  POSITION VARCHAR(30),
  ADRESS VARCHAR(50),
  NUMBERFAMILY INT,
  NUM_DETAILS_DEPARTMENT INT NOT NULL,
  NUM_DETAILS_EDUCATION INT NOT NULL
);
--------ADD CONSTRAINT/ UNIQUE/ PK/ FK
ALTER TABLE HUMAN_RESURCES_DEPARTMEN--ALTER TABLE - используется для изменения структуры таблицы
  ADD CONSTRAINT HUMAN_RESURCES_DEPARTMEN_PK PRIMARY KEY (IDEMPLOYEE);--добавляет ограничение первичного ключа на номер

ALTER TABLE HUMAN_RESURCES_DEPARTMEN
  ADD CONSTRAINT HUMAN_RESURCES_DEPARTMEN_UK UNIQUE (NAMEFL);--создает ограничение уникального имени
---FOR TABLE 2---
ALTER TABLE HUMAN_RESURCES_DEPARTMEN
  ADD CONSTRAINT HUMAN_RESURCES_DEPARTMEN_DETAILS_FAMALY_FK FOREIGN KEY (NUMBERFAMILY)
  REFERENCES DETAILS_FAMALY (IDFAMALY);--создает внешний ключ для связи двух таблиц
---FOR TABLE 3---
ALTER TABLE HUMAN_RESURCES_DEPARTMEN
  ADD CONSTRAINT HUMAN_RESURCES_DEPARTMEN_DETAILS_DEPARTMENT_FK FOREIGN KEY (NUM_DETAILS_DEPARTMENT)
  REFERENCES DETAILS_DEPARTMENT (NUMBERDEP);
---FOR TABLE 4---
ALTER TABLE HUMAN_RESURCES_DEPARTMEN
	ADD CONSTRAINT HUMAN_RESURCES_DEPARTMEN_DETAILS_EDUCATION_FK FOREIGN KEY (NUM_DETAILS_EDUCATION)
	REFERENCES DETAILS_EDUCATION (IDPLACEEDUCATION);
--------INSERT
INSERT INTO HUMAN_RESURCES_DEPARTMEN VALUES (1,'AXEL RONING', 'MARRIED', '1986-09-11', 'HIGH', 'SAMSUNG', 10, 'ELECTROMAGNETIC', 'INGINEEUR', 'WALL STR.', 701, 01, 10);
INSERT INTO HUMAN_RESURCES_DEPARTMEN VALUES (2,'ROSY COULD', 'DEVORCED', '1986-10-11', 'HIGH', 'SIEMENS', 10, 'ELECTROMAGNETIC', 'INGINEEUR', 'SOUTH STR.', 702, 02, 20);
INSERT INTO HUMAN_RESURCES_DEPARTMEN VALUES (3,'MISHEL D_QUIT', 'MARRIED', '1993-10-09', 'COLL', 'PHILIPS', 5, 'ELECTROSECURITY', 'INGINEEUR', 'WALL STR.', 703, 03, 30);
INSERT INTO HUMAN_RESURCES_DEPARTMEN VALUES (4,'JORGE COLINS', 'UNMARRIED', '1998-09-11', 'HIGH', 'XEROX', 3, 'ELECTROSECURITY', 'INGINEEUR', 'NORD STR.', 704, 04, 40);
INSERT INTO HUMAN_RESURCES_DEPARTMEN VALUES (5,'KATE LAWREE', 'UNMARRIED', '1992-09-11', 'HIGH', 'LEXMARK', 3, 'ELECTROMAGNETIC', 'INGINEEUR', 'WEST STR.', 705, 05, 50);
--------ACTIVITY
SELECT *
FROM HUMAN_RESURCES_DEPARTMEN

-----------------------------------------------------------------------------------
-----TABLE 2-------
CREATE TABLE DETAILS_FAMALY
(
	IDFAMALY INT NOT NULL,
	IDEMPLOYEE INT NOT NULL,
	WIFEMANNAME VARCHAR(30),
	DATEBIRTHSPOUSE DATE,
	KINDQUANTITY INT,
	EDUCATION VARCHAR(30)
);
--------ADD CONSTRAINT
ALTER TABLE DETAILS_FAMALY--ALTER TABLE - используется для изменения структуры таблицы
  ADD CONSTRAINT DETAILS_FAMALY_PK PRIMARY KEY (IDFAMALY);--добавляет ограничение первичного ключа на номер
--------INSERT
INSERT INTO DETAILS_FAMALY VALUES (701, 1, 'JOANA RONING', '1987-09-30', 2, 'PRIMARY SCHOOL');
INSERT INTO DETAILS_FAMALY VALUES (702, 2, NULL, NULL, 1, 'KINDERGARTEN');
INSERT INTO DETAILS_FAMALY VALUES (703, 3, 'ILONA D_QUIT', '1998-12-18', NULL, NULL);
INSERT INTO DETAILS_FAMALY VALUES (704, 4, NULL, NULL, NULL, NULL);
INSERT INTO DETAILS_FAMALY VALUES (705, 5, NULL, NULL, NULL, NULL);
--------ACTIVITY
SELECT *
FROM DETAILS_FAMALY

SET STATISTICS XML ON
SELECT 
	H.NAMEFL,
	H.FAMILYSTATUS,
	D.WIFEMANNAME,
	D.DATEBIRTHSPOUSE
FROM HUMAN_RESURCES_DEPARTMEN H left join DETAILS_FAMALY D
ON H.NUMBERFAMILY = D.IDFAMALY
WHERE WIFEMANNAME = 'JOANA RONING'

SET SHOWPLAN_XML ON;
SET SHOWPLAN_XML OFF;

EXEC SP_HELPINDEX 'HUMAN_RESURCES_DEPARTMEN';

CREATE INDEX #TRAINING1 ON HUMAN_RESURCES_DEPARTMEN(NAMEFL);
---------------------------------------------------------------------------------------
------TABLE 3-------
CREATE TABLE DETAILS_DEPARTMENT
(
	NUMBERDEP INT NOT NULL,
	IDDEP INT NOT NULL,
	IDEMPLOYEE INT NOT NULL,
	QUANTITYEMPLOYEE INT NOT NULL,
	EARNINGS INT, --ПРИБЫЛЬ
	LOCATION_PLACE VARCHAR(30)
);
--------INSERT
INSERT INTO DETAILS_DEPARTMENT VALUES (01, 26, 1, 3, 15000, 'CALIFORNIA');
INSERT INTO DETAILS_DEPARTMENT VALUES (02, 26, 2, 3, 3000, 'CALIFORNIA');
INSERT INTO DETAILS_DEPARTMENT VALUES (03, 35, 3, 2, 10000, 'LOS ANGELES');
INSERT INTO DETAILS_DEPARTMENT VALUES (04, 35, 4, 2, 8000, 'LOS ANGELES');
INSERT INTO DETAILS_DEPARTMENT VALUES (05, 26, 5, 3, 15000, 'CALIFORNIA');
--------ADD CONSTRAINT
ALTER TABLE DETAILS_DEPARTMENT
	ADD CONSTRAINT DETAILS_DEPARTMENT_PK PRIMARY KEY (NUMBERDEP);
--------ACTIVITY
SELECT *
FROM DETAILS_DEPARTMENT
--
SELECT 
	H.DEPARTMENT,
	H.NAMEFL,
	H.IDEMPLOYEE,
	D.LOCATION_PLACE,
	D.EARNINGS,
	D.QUANTITYEMPLOYEE,
	D.IDDEP
FROM HUMAN_RESURCES_DEPARTMEN H left join DETAILS_DEPARTMENT D
ON H.NUM_DETAILS_DEPARTMENT = D.NUMBERDEP
WHERE IDDEP = 26
--
SELECT IDDEP, LOCATION_PLACE
FROM DETAILS_DEPARTMENT
WHERE IDDEP = '26'
--
SELECT *
FROM DETAILS_DEPARTMENT
WHERE EARNINGS < 10000
ORDER BY EARNINGS DESC
-----------------------------------------------------------------------
-------TABLE 4----------
CREATE TABLE DETAILS_EDUCATION
(
	IDPLACEEDUCATION INT NOT NULL,
	IDEMPLOYEE INT NOT NULL,
	NAMEUNIVERSITY VARCHAR(50),
	LOCATIONUNIVERSITY VARCHAR(30),
	NUMBERUNIVERSITY INT NOT NULL
);

DROP TABLE DETAILS_EDUCATION
--------INSERT
INSERT INTO DETAILS_EDUCATION VALUES (10, 1, 'California Institute of Technology', 'Pasadena, California', 101);
INSERT INTO DETAILS_EDUCATION VALUES (20, 2, 'Clarkson University', 'Potsdam, New York', 202);
INSERT INTO DETAILS_EDUCATION VALUES (30, 3, NULL, NULL, 303);
INSERT INTO DETAILS_EDUCATION VALUES (40, 4, 'California State Polytechnic University, Pomona', 'Pomona, California', 404);
INSERT INTO DETAILS_EDUCATION VALUES (50, 5, 'California Polytechnic State University', 'San Luis Obispo, California', 505);
---------ADD CONSTRAINT
ALTER TABLE DETAILS_EDUCATION
	ADD CONSTRAINT DETAILS_EDUCATION_PK PRIMARY KEY (IDPLACEEDUCATION);

ALTER TABLE DETAILS_EDUCATION
	ADD CONSTRAINT DETAILS_EDUCATION_DETAILS_EDUCATION_UNIVERSITY_FK FOREIGN KEY(NUMBERUNIVERSITY)
	REFERENCES DETAILS_EDUCATION_UNIVERSITY (IDUNIVERSITY);
---------ACTIVITY
SELECT *
FROM DETAILS_EDUCATION

SELECT 
	H.NAMEFL,
	H.EDUCATION,
	D.IDPLACEEDUCATION,
	D.NAMEUNIVERSITY,
	D.LOCATIONUNIVERSITY
FROM HUMAN_RESURCES_DEPARTMEN H LEFT JOIN DETAILS_EDUCATION D
ON H.NUM_DETAILS_EDUCATION = D.IDPLACEEDUCATION

------SUB TABLE 1 FOR TABLE 4
-------TABLE 4.1----------
CREATE TABLE DETAILS_EDUCATION_UNIVERSITY
(
	IDUNIVERSITY INT NOT NULL,
	NAMEUNIVERSITY VARCHAR(50),
	STUDENTQUANTITY INT,
	IDEDUCATION INT NOT NULL
);
------INSERT
INSERT INTO DETAILS_EDUCATION_UNIVERSITY VALUES (101, 'California Institute of Technology', 10000, 10);
INSERT INTO DETAILS_EDUCATION_UNIVERSITY VALUES (202, 'Clarkson University', 20000, 20);
INSERT INTO DETAILS_EDUCATION_UNIVERSITY VALUES (303, NULL, NULL, 30);
INSERT INTO DETAILS_EDUCATION_UNIVERSITY VALUES (404, 'California State Polytechnic University', 120000, 40);
INSERT INTO DETAILS_EDUCATION_UNIVERSITY VALUES (505, 'California Polytechnic State University', 11000, 50);
---------ADD CONSTRAINT
ALTER TABLE DETAILS_EDUCATION_UNIVERSITY
	ADD CONSTRAINT DETAILS_EDUCATION_UNIVERSITY_PK PRIMARY KEY (IDUNIVERSITY)
---------ACTIVITY
SELECT *
FROM DETAILS_EDUCATION_UNIVERSITY

SELECT 
	HRD.NAMEFL,
	DE.NAMEUNIVERSITY,
	DE.LOCATIONUNIVERSITY,
	DEU.IDUNIVERSITY,
	DEU.STUDENTQUANTITY
FROM DETAILS_EDUCATION DE LEFT JOIN DETAILS_EDUCATION_UNIVERSITY DEU
ON DE.NUMBERUNIVERSITY = DEU.IDUNIVERSITY
JOIN HUMAN_RESURCES_DEPARTMEN HRD
ON HRD.IDEMPLOYEE = DE.IDEMPLOYEE
WHERE LOCATIONUNIVERSITY LIKE '%CALIFORNIA%'

------------------------------------------------------------------------------
------------------------------------------------------------------------------
------------FOR EXAMENATION---------------------------------------------------
------------------------------------------------------------------------------
------------------------------------------------------------------------------
--10 ЗАПРОСОВ ОСМЫСЛЕННЫХ
--1) ВЫБОРКА ВСЕХ СОТРУДНИКОВ ИЗ 26 ДЕПАРТАМЕНТА
SELECT 
	H.DEPARTMENT,
	H.NAMEFL,
	H.IDEMPLOYEE,
	D.LOCATION_PLACE,
	D.EARNINGS,
	D.QUANTITYEMPLOYEE,
	D.IDDEP
FROM HUMAN_RESURCES_DEPARTMEN H left join DETAILS_DEPARTMENT D
ON H.NUM_DETAILS_DEPARTMENT = D.NUMBERDEP
WHERE IDDEP = 26

--2) ВЫБОРКА СОТРУДНИКОВ ПРОХОДИВШИХ ОБУЧЕНИЕ В ОПРЕДЕЛЕННОМ РЕГИОНЕ
SELECT 
	HRD.NAMEFL,
	DE.NAMEUNIVERSITY,
	DE.LOCATIONUNIVERSITY,
	DEU.IDUNIVERSITY,
	DEU.STUDENTQUANTITY
FROM DETAILS_EDUCATION DE LEFT JOIN DETAILS_EDUCATION_UNIVERSITY DEU
ON DE.NUMBERUNIVERSITY = DEU.IDUNIVERSITY
JOIN HUMAN_RESURCES_DEPARTMEN HRD
ON HRD.IDEMPLOYEE = DE.IDEMPLOYEE
WHERE LOCATIONUNIVERSITY LIKE '%CALIFORNIA%'

--3)  ВЫБРАТЬ СОТРУДНИКОВ С ОДИНАКОВОЙ ЗАРАБОТНОЙ ПЛАТОЙ.
SELECT 
	FIRST.EARNINGS,
	FIRST.IDEMPLOYEE AS FIRST_EMPL,
	SECOND.IDEMPLOYEE AS SECOND_EMPL,
	FIRST.LOCATION_PLACE
FROM DETAILS_DEPARTMENT FIRST,
	DETAILS_DEPARTMENT SECOND
WHERE FIRST.EARNINGS = SECOND.EARNINGS AND FIRST.IDEMPLOYEE > SECOND.IDEMPLOYEE

--4) НАЙТИ СОСТАВ СЕМЬИ ОПРЕДЕЛЕННОГО СОТРУДНИКА
SELECT 
	H.NAMEFL,
	H.FAMILYSTATUS,
	D.WIFEMANNAME,
	D.DATEBIRTHSPOUSE,
	D.KINDQUANTITY
FROM HUMAN_RESURCES_DEPARTMEN H LEFT JOIN DETAILS_FAMALY D
ON H.NUMBERFAMILY = D.IDFAMALY
WHERE NAMEFL = 'AXEL RONING'

--5) Выбрать всех сотрудников в порядке уменьшения общей заработной платы
SELECT 
	HRD.NAMEFL,
	GENERAL_EARNINGS_EMPLOYEES = (
				SELECT SUM(DD.EARNINGS)
				FROM DETAILS_DEPARTMENT DD
				WHERE DD.IDEMPLOYEE = HRD.IDEMPLOYEE)
FROM DETAILS_DEPARTMENT DD LEFT JOIN HUMAN_RESURCES_DEPARTMEN HRD
ON DD.IDEMPLOYEE = HRD.IDEMPLOYEE
ORDER BY GENERAL_EARNINGS_EMPLOYEES DESC

SELECT * FROM HUMAN_RESURCES_DEPARTMEN
SELECT * FROM DETAILS_DEPARTMENT
SELECT * FROM DETAILS_EDUCATION

--6) Найти описание департамента, в котором работает определенный сотрудник.
SELECT LOCATION_PLACE, QUANTITYEMPLOYEE, IDDEP
FROM DETAILS_DEPARTMENT
WHERE IDEMPLOYEE IN (
		SELECT IDEMPLOYEE 
		FROM HUMAN_RESURCES_DEPARTMEN
		WHERE NAMEFL = 'JORGE COLINS')

--7) ВЫБРАТЬ СОТРУДНИКОВ ЗАРАБОТНАЯ ПЛАТА КОТОРЫХ НИЖЕ СРЕДНЕЙ СУММЫ
SELECT 
	IDDEP, IDEMPLOYEE, EARNINGS
FROM DETAILS_DEPARTMENT 
WHERE EARNINGS < (
	SELECT AVG(EARNINGS) AS AVG_EARNINGS
	FROM DETAILS_DEPARTMENT)
ORDER BY EARNINGS DESC
--GROUP BY IDDEP,IDEMPLOYEE, EARNINGS
--HAVING AVG(EARNINGS) < 800;

SELECT *
FROM DETAILS_DEPARTMENT

SELECT * FROM HUMAN_RESURCES_DEPARTMEN
SELECT * FROM DETAILS_DEPARTMENT
SELECT * FROM DETAILS_FAMALY
SELECT * FROM DETAILS_EDUCATION
SELECT * FROM DETAILS_EDUCATION_UNIVERSITY

--8) ВЫВЕСТИ СУММУ ЗАРАБОТНОЙ ПЛАТЫ ВСЕХ СОТРУДНИКОВ
SELECT SUM(EARNINGS) AS SUM_EAR_ALL_EMPLOYEE
FROM DETAILS_DEPARTMENT

--9) ПОЛУЧИТЬ КОЛИЧЕСТВО СОТРУДНИКОВ И СРЕДНЮЮ СУММУ ЗП, КОТОРАЯ МЕНЕЕ $10000
SELECT IDDEP, COUNT(IDEMPLOYEE) AS QTY_EMPLOYEE, 
   AVG(EARNINGS) AS AVG_EARNINGS
FROM DETAILS_DEPARTMENT
GROUP BY IDDEP
HAVING AVG(EARNINGS) < 10000

-- HAVING является указателем на результат выполнения агрегатных функций
------------------------------------------------------------------------
--3 ПРЕДСТАВЛЕНИЯ
--1) Сотрудники, у которых нет детей
GO
CREATE VIEW EMPLOYEE_NOT_KIND AS
SELECT HRD.IDEMPLOYEE, HRD.NAMEFL, HRD.FAMILYSTATUS,
	   DF.KINDQUANTITY
FROM HUMAN_RESURCES_DEPARTMEN HRD LEFT JOIN DETAILS_FAMALY DF
ON HRD.IDEMPLOYEE = DF.IDEMPLOYEE
WHERE DF.KINDQUANTITY IS NULL
GO

SELECT *
FROM EMPLOYEE_NOT_KIND

DROP VIEW EMPLOYEE_NOT_KIND

--2) минимальная и максимальная зарплата сотрудника 
CREATE VIEW MAX_EARNINGS AS
SELECT MIN(EARNINGS) AS MIN_EARNINGS,
	   MAX(EARNINGS) AS MAX_EARNINGS
FROM DETAILS_DEPARTMENT

SELECT * 
FROM MAX_EARNINGS

DROP VIEW MAX_EARNINGS

--3) Вывести зп выше указанной
CREATE VIEW DML_OPER AS
SELECT *
FROM DETAILS_DEPARTMENT
WHERE EARNINGS > 10000

SELECT *
FROM DML_OPER

 SELECT * 
 FROM DETAILS_FAMALY
 
--4 ПРОЦЕДУРЫ И ФУНКЦИИ 5 ШТ
---------------------------------------------------------------------------------
--4 ПРОЦЕДУРЫ
--1) Поиск локации по части названия; если такой не нашлось — вывести сообщение.
CREATE PROCEDURE SEARCH_UNIVER_IN_LOCATION
				@LOCATIONUNIVERSITY NVARCHAR(50)
	AS
	BEGIN
		SELECT LOCATIONUNIVERSITY
		FROM DETAILS_EDUCATION 
		WHERE LOCATIONUNIVERSITY LIKE ('%'+@LOCATIONUNIVERSITY+'%')
		IF @@ROWCOUNT = 0
		PRINT 'NOT FOUND LOCATION'
	END
GO

DROP PROCEDURE SEARCH_UNIVER_IN_LOCATION

DECLARE @LOCATIONUNIVERSITY VARCHAR(25)
SET @LOCATIONUNIVERSITY = 'CAL'
EXEC SEARCH_UNIVER_IN_LOCATION @LOCATIONUNIVERSITY

SELECT * FROM HUMAN_RESURCES_DEPARTMEN
SELECT * FROM DETAILS_DEPARTMENT
SELECT * FROM DETAILS_FAMALY
SELECT * FROM DETAILS_EDUCATION
SELECT * FROM DETAILS_EDUCATION_UNIVERSITY

--2) ОБНАВЛЕНИЕ ДАННЫХ В ТАБЛИЦЕ СЕМЬЯ
CREATE PROCEDURE UPDATE_FAMILY 
			@WIFEMANNAME VARCHAR(30), 
			@KINDQUANTITY INT
AS 
BEGIN
	UPDATE DETAILS_FAMILY 
	   SET KINDQUANTITY = @KINDQUANTITY  
	   WHERE WIFEMANNAME LIKE ('%'+@WIFEMANNAME+'%')
END

DECLARE @WIFEMANNAME VARCHAR(30) = 'COLINS',
		@KINDQUANTITY INT = 1

EXEC UPDATE_FAMILY @WIFEMANNAME, @KINDQUANTITY

SELECT * FROM DETAILS_FAMILY

DROP PROCEDURE UPDATE_FAMILY

--3) ДОБАВИТЬ ВТОРОЕ ОБРАЗОВАНИЕ РАБОТНИКА
CREATE PROCEDURE EDUCATION_SERCH 
				@IDPLACEEDUCATION INT,
				@IDEMPLOYEE INT,
				@NAMEUNIVERSITY VARCHAR(50),
				@LOCATIONUNIVERSITY VARCHAR(50),
				@NUMBERUNIVERSITY INT
	AS
	DECLARE @COUNT INT = 0
	BEGIN
		BEGIN TRY
		INSERT INTO DETAILS_EDUCATION (IDPLACEEDUCATION, IDEMPLOYEE, NAMEUNIVERSITY, LOCATIONUNIVERSITY, NUMBERUNIVERSITY)
			VALUES (@IDPLACEEDUCATION, @IDEMPLOYEE, @NAMEUNIVERSITY, @LOCATIONUNIVERSITY, @NUMBERUNIVERSITY)
	END TRY
	BEGIN CATCH
		SET @COUNT = -1
	IF ERROR_NUMBER() = 2627
		PRINT 'ERROR! THIS LOCATION IS ADD FOR THIS EMPLOYEE'
	END CATCH
		RETURN @COUNT;
	END
GO

DROP PROCEDURE EDUCATION_SERCH

INSERT INTO DETAILS_EDUCATION VALUES (20, 1, 'Clarkson University', 'Potsdam, New York', 202);

DECLARE @IDPLACEEDUCATION INT,
		@IDEMPLOYEE INT,
		@NAMEUNIVERSITY VARCHAR(50),
		@LOCATIONUNIVERSITY VARCHAR(50),
		@NUMBERUNIVERSITY INT
SET @IDPLACEEDUCATION = 28
SET @IDEMPLOYEE = 1
SET @NAMEUNIVERSITY = 'Clarkson University'
SET @LOCATIONUNIVERSITY = 'Potsdam, New York'
SET @NUMBERUNIVERSITY = 202

EXEC EDUCATION_SERCH @IDPLACEEDUCATION, @IDEMPLOYEE, @NAMEUNIVERSITY, @LOCATIONUNIVERSITY, @NUMBERUNIVERSITY

SELECT *
FROM DETAILS_EDUCATION_UNIVERSITY
SELECT *
FROM DETAILS_EDUCATION

DELETE FROM DETAILS_EDUCATION WHERE IDPLACEEDUCATION = 28

---------------------------------------------------------------------------------
--5 ФУНКЦИИ
--1) НАЙТИ СОТРУДНИКОВ 1990 И 1995 ГОДА РОЖДЕНИЯ
GO
CREATE FUNCTION SERCH_EMP_BY_BIRTH_FUNC
					(@START_YEAR DATE,
					 @LAST_YEAR DATE)
RETURNS INT
BEGIN
	DECLARE @COUNT_OF_EMP INT
	SET @COUNT_OF_EMP = 0
	SET @COUNT_OF_EMP = (SELECT COUNT(IDEMPLOYEE) 
						 FROM HUMAN_RESURCES_DEPARTMEN
						 WHERE BIRTHDAY BETWEEN @START_YEAR AND @LAST_YEAR)
	RETURN @COUNT_OF_EMP
END
GO

DECLARE @SERCH_EMP_AT_BIRTH INT = DBO.SERCH_EMP_BY_BIRTH_FUNC('1990-01-01', '1995-12-31')
PRINT 'QUANTITY EMPLOYEES IN THE DATA RANGE: ' + CAST(@SERCH_EMP_AT_BIRTH AS VARCHAR(50))

SELECT NAMEFL, BIRTHDAY, DBO.SERCH_EMP_BY_BIRTH_FUNC('1990-01-01', '1995-12-31') AS SERCH_EMP_BY_BIRTH
FROM HUMAN_RESURCES_DEPARTMEN

SELECT * FROM HUMAN_RESURCES_DEPARTMEN
DELETE FROM HUMAN_RESURCES_DEPARTMEN WHERE IDEMPLOYEE = 5
ROLLBACK
DROP FUNCTION SERCH_EMP_BY_BIRTH_FUNC
------------------------------------------------------
--5 ТРИГГЕР
--1) ДОБАВИТЬ УДАЛЕННОГО СОТРУДНИКА В ТАБЛИЦУ DELETED
INSERT INTO HUMAN_RESURCES_DEPARTMEN VALUES (5,'KATE LAWREE', 'UNMARRIED', '1992-09-11', 'HIGH', 'LEXMARK', 3, 'ELECTROMAGNETIC', 'INGINEEUR', 'WEST STR.', 705, 05, 50);

CREATE TABLE #DELTED_TB 
				(IDEMPLOYEE INT NOT NULL,
				 NAMEFL VARCHAR(50))

CREATE TRIGGER DROP_EMP 
	ON HUMAN_RESURCES_DEPARTMEN AFTER DELETE
	AS
BEGIN 
	DECLARE @IDEMPLOYEE INT, @NAMEFL VARCHAR(50)
	SELECT @IDEMPLOYEE = (SELECT IDEMPLOYEE FROM DELETED),
		   @NAMEFL = (SELECT NAMEFL FROM DELETED)
	INSERT INTO #DELTED_TB VALUES(@IDEMPLOYEE, @NAMEFL)
END

DELETE FROM HUMAN_RESURCES_DEPARTMEN WHERE IDEMPLOYEE = 5

SELECT * FROM #DELTED_TB
SELECT * FROM HUMAN_RESURCES_DEPARTMEN
SELECT * FROM DETAILS_EDUCATION
SELECT * FROM DETAILS_FAMILY
DROP TABLE #DELTED_TB
DROP TRIGGER DROP_EMP
-----------------------------------------------------------
-- 6) КУРСОР
--1)
DECLARE
	@NAMEFL VARCHAR(50), @BIRTHDAY DATE, @EDUCATION VARCHAR(50), @LASTPLACEWORK VARCHAR(50), @NAMEUNI VARCHAR(50), @WIFENAME VARCHAR(50), 
	@KINDQUANTITY INT, @MESSAGE VARCHAR(8000)
PRINT 'NEEDED INFO'

DECLARE INFO_BY_EMP_CURSOR CURSOR FOR
	SELECT 
	HRD.NAMEFL,
	HRD.BIRTHDAY,
	HRD.EDUCATION,
	HRD.LASTPLACEWORK,
	DE.NAMEUNIVERSITY,
	DF.WIFEMANNAME,
	DF.KINDQUANTITY
FROM DETAILS_EDUCATION DE LEFT JOIN DETAILS_EDUCATION_UNIVERSITY DEU
ON DE.NUMBERUNIVERSITY = DEU.IDUNIVERSITY
JOIN HUMAN_RESURCES_DEPARTMEN HRD
ON HRD.IDEMPLOYEE = DE.IDEMPLOYEE
JOIN DETAILS_FAMILY DF
ON DF.IDEMPLOYEE = HRD.IDEMPLOYEE

OPEN INFO_BY_EMP_CURSOR
FETCH NEXT FROM INFO_BY_EMP_CURSOR INTO @NAMEFL, @BIRTHDAY, @EDUCATION, @LASTPLACEWORK, @NAMEUNI, @WIFENAME, @KINDQUANTITY
WHILE @@FETCH_STATUS=0
BEGIN
    SELECT @MESSAGE= 'NAME: '+ @NAMEFL +'|||'+'BIRTHDAY: '+CAST(@BIRTHDAY AS VARCHAR(10)) +'||| '+'EDUCATION: ' + @EDUCATION +'|||'+
					'LAST PLACE WORK: ' +@LASTPLACEWORK+'|||'+ 'NAME UNI: ' + @NAMEUNI
					+ '|||'+ 'WIFE NAME: ' + @WIFENAME + '|||' + 'KIND QUANTITY: ' +CAST(@KINDQUANTITY AS VARCHAR(10))
    PRINT @MESSAGE
    FETCH NEXT FROM INFO_BY_EMP_CURSOR INTO @NAMEFL, @BIRTHDAY, @EDUCATION, @LASTPLACEWORK, @NAMEUNI, @WIFENAME, @KINDQUANTITY
END

CLOSE INFO_BY_EMP_CURSOR
DEALLOCATE INFO_BY_EMP_CURSOR
--СПИСОК ВОПРОСОВ ТЕОРЕТИЧЕСКИХ

--БД - ХРАНИТ ДАННЫЕ
--СУБД - УПРАВЛЯЕТ ДАННЫМИ